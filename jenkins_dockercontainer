pipeline {
    agent any
    parameters {
        string(name: 'EMPLOYEE_ID', defaultValue: '1', description: 'Employee ID for which the container should be started')
    }
   
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    try {
                        // Clone the cloud-browser repository from GitHub
                        echo "Cloning the cloud-browser repository from GitHub"
                        git url: 'https://github.com/Pardeepkaur32/cloud-browser.git', branch: 'main'
                    } catch (Exception e) {
                        echo "Error during repository clone: ${e.message}"
                        throw e
                    }
                }
            }
        }

        stage('Run start_container.sh') {
            steps {
                script {
                    try {
                        // Define the path to the start_container.sh script
                        def scriptPath = "./start_container.sh"

                        // Make the script executable
                        echo "Making ${scriptPath} executable"
                        sh "chmod +x ${scriptPath}"

                        // Execute the start_container.sh script with the EMPLOYEE_ID parameter
                        echo "Running start_container.sh with EMPLOYEE_ID: ${params.EMPLOYEE_ID}"
                        sh "./${scriptPath} ${params.EMPLOYEE_ID}"
                    } catch (Exception e) {
                        echo "Error during script execution: ${e.message}"
                        throw e
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the job to avoid any residue of previous builds
            echo "Cleaning up the workspace"
            cleanWs()
        }
    }
}
