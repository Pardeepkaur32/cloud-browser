pipeline {
    agent any
    parameters {
        string(name: 'EMPLOYEE_ID', defaultValue: '1', description: 'Employee ID for which the container should be started')
    }
   
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    try {
                        echo "Cloning the cloud-browser repository from GitHub"
                        git url: 'https://github.com/Pardeepkaur32/cloud-browser.git', branch: 'main'
                    } catch (Exception e) {
                        echo "Error during repository clone: ${e.message}"
                        throw e
                    }
                }
            }
        }

        stage('Validate Parameters') {
            steps {
                script {
                    try {
                        echo "Validating EMPLOYEE_ID parameter: ${params.EMPLOYEE_ID}"
                        if (!params.EMPLOYEE_ID.isInteger()) {
                            error "EMPLOYEE_ID must be an integer."
                        } else {
                            echo "EMPLOYEE_ID is valid: ${params.EMPLOYEE_ID}"
                        }
                    } catch (Exception e) {
                        echo "Error during parameter validation: ${e.message}"
                        throw e
                    }
                }
            }
        }

        stage('Run start_container.sh') {
            steps {
                script {
                    try {
                        def scriptPath = "./start_container.sh"

                        // Check if the script exists before trying to run it
                        if (fileExists(scriptPath)) {
                            echo "Making ${scriptPath} executable"
                            sh "chmod +x ${scriptPath}"

                            echo "Running start_container.sh with EMPLOYEE_ID: ${params.EMPLOYEE_ID}"
                            // Execute the start_container.sh script with the EMPLOYEE_ID parameter
                            sh """
                            set -x  # Enable debugging for the shell script
                            ./${scriptPath} ${params.EMPLOYEE_ID}
                            set +x  # Disable debugging
                            """
                        } else {
                            error "start_container.sh not found at the expected path."
                        }
                    } catch (Exception e) {
                        echo "Error during script execution: ${e.message}"
                        throw e
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up the workspace"
            cleanWs()
        }
    }
}
