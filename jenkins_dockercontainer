pipeline {
    agent any
    parameters {
        string(name: 'EMPLOYEE_ID', defaultValue: '1', description: 'Employee ID for which the container should be started')
    }
    
    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    // Validate that EMPLOYEE_ID is an integer
                    if (!params.EMPLOYEE_ID.isInteger()) {
                        error "EMPLOYEE_ID must be an integer."
                    }
                }
            }
        }

        stage('Clone GitHub Repository') {
            steps {
                script {
                    // Clone the GitHub repository containing the start_container.sh script
                    echo "Cloning GitHub repository: https://github.com/Pardeepkaur32/cloud-browser.git"
                    sh 'git clone https://github.com/Pardeepkaur32/cloud-browser.git'
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    // Define the image name from Docker Hub
                    def imageName = "pardeepkaur/chrome-vnc:latest"  // Docker Hub image name

                    try {
                        echo "Attempting to pull Docker image: ${imageName}"

                        // Log in to Docker Hub using Jenkins credentials
                        withCredentials([usernamePassword(credentialsId: "docker", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) { 
                            // Perform Docker login and pull the image from Docker Hub
                            echo "Logging into Docker Hub with user: ${DOCKER_USER}"
                            sh """
                                echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin
                                docker pull ${imageName}
                            """
                        }
                        echo "Docker image pulled successfully from Docker Hub."
                    } catch (Exception e) {
                        echo "Failed to pull Docker image: ${e.message}"
                        throw e
                    }
                }
            }
        }

        stage('Add Jenkins to Docker Group') {
            steps {
                script {
                    // This stage attempts to add Jenkins user to the Docker group, but it might need a restart
                    echo "Adding Jenkins user to Docker group"
                    sh 'sudo usermod -aG docker jenkins'
                    sh 'sudo chown -R jenkins:jenkins /home/ubuntu/cloud-browser/vol/'
                    sh 'sudo chmod -R 755 /home/ubuntu/cloud-browser/vol/'
                    echo "Docker group permissions updated."
                }
            }
        }

        stage('Run start_container.sh') {
            steps {
                script {
                    try {
                        // Define the path to the start_container.sh script
                        def scriptPath = "cloud-browser/start_container.sh" // Updated to point to the cloned repo

                        // Check if the script exists in the cloned repo
                        echo "Checking if script exists: ${scriptPath}"
                        sh "ls -l ${scriptPath}"

                        // Make the script executable
                        echo "Making ${scriptPath} executable"
                        sh "chmod +x ${scriptPath}"

                        // Execute the start_container.sh script with the EMPLOYEE_ID parameter
                        echo "Running start_container.sh with EMPLOYEE_ID: ${params.EMPLOYEE_ID}"
                        sh "./${scriptPath} ${params.EMPLOYEE_ID}"
                    } catch (Exception e) {
                        echo "Error during script execution: ${e.message}"
                        throw e
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the job to avoid any residue of previous builds
            echo "Cleaning up the workspace"
            cleanWs()
        }
    }
}
